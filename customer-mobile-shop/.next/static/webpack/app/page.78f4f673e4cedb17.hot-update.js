"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/addressStorage.ts":
/*!*************************************!*\
  !*** ./src/utils/addressStorage.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddressStorage: () => (/* binding */ AddressStorage)\n/* harmony export */ });\nconst ADDRESSES_KEY = 'user_addresses';\nclass AddressStorage {\n    static generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    static getAddresses() {\n        if (false) {}\n        try {\n            const stored = localStorage.getItem(ADDRESSES_KEY);\n            if (!stored) return [];\n            const addresses = JSON.parse(stored);\n            // Migrate legacy addresses to new format\n            const migratedAddresses = addresses.map((addr)=>{\n                // If it's already new format, return as is\n                if (!('ward' in addr || 'district' in addr)) {\n                    return addr;\n                }\n                // Convert legacy format to new format\n                const legacy = addr;\n                const fullAddress = [\n                    legacy.address,\n                    legacy.ward,\n                    legacy.district\n                ].filter(Boolean).join(', ');\n                return {\n                    id: legacy.id,\n                    name: legacy.name,\n                    phone: legacy.phone,\n                    address: \"\".concat(fullAddress, \", \").concat(legacy.city),\n                    isDefault: legacy.isDefault,\n                    createdAt: legacy.createdAt,\n                    updatedAt: new Date().toISOString()\n                };\n            });\n            // Save migrated addresses\n            if (migratedAddresses.length > 0) {\n                this.saveAddresses(migratedAddresses);\n            }\n            return migratedAddresses;\n        } catch (error) {\n            console.error('Failed to get addresses:', error);\n            return [];\n        }\n    }\n    static saveAddresses(addresses) {\n        if (false) {}\n        try {\n            localStorage.setItem(ADDRESSES_KEY, JSON.stringify(addresses));\n        } catch (error) {\n            console.error('Failed to save addresses:', error);\n        }\n    }\n    static addAddress(data) {\n        const addresses = this.getAddresses();\n        // If this is set as default, unset other defaults\n        if (data.isDefault) {\n            addresses.forEach((addr)=>addr.isDefault = false);\n        }\n        // If this is the first address, make it default\n        const isFirstAddress = addresses.length === 0;\n        const newAddress = {\n            id: this.generateId(),\n            ...data,\n            isDefault: data.isDefault || isFirstAddress,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n        addresses.push(newAddress);\n        this.saveAddresses(addresses);\n        return newAddress;\n    }\n    static updateAddress(id, data) {\n        const addresses = this.getAddresses();\n        const index = addresses.findIndex((addr)=>addr.id === id);\n        if (index === -1) return null;\n        // If setting as default, unset others\n        if (data.isDefault) {\n            addresses.forEach((addr)=>addr.isDefault = false);\n        }\n        addresses[index] = {\n            ...addresses[index],\n            ...data,\n            updatedAt: new Date().toISOString()\n        };\n        this.saveAddresses(addresses);\n        return addresses[index];\n    }\n    static deleteAddress(id) {\n        const addresses = this.getAddresses();\n        const filteredAddresses = addresses.filter((addr)=>addr.id !== id);\n        if (filteredAddresses.length === addresses.length) {\n            return false; // Address not found\n        }\n        // If we deleted the default address, make the first remaining address default\n        const deletedAddress = addresses.find((addr)=>addr.id === id);\n        if ((deletedAddress === null || deletedAddress === void 0 ? void 0 : deletedAddress.isDefault) && filteredAddresses.length > 0) {\n            filteredAddresses[0].isDefault = true;\n        }\n        this.saveAddresses(filteredAddresses);\n        return true;\n    }\n    static setDefaultAddress(id) {\n        const addresses = this.getAddresses();\n        const targetAddress = addresses.find((addr)=>addr.id === id);\n        if (!targetAddress) return false;\n        // Unset all defaults and set the target as default\n        addresses.forEach((addr)=>{\n            addr.isDefault = addr.id === id;\n            if (addr.id === id) {\n                addr.updatedAt = new Date().toISOString();\n            }\n        });\n        this.saveAddresses(addresses);\n        return true;\n    }\n    static getDefaultAddress() {\n        const addresses = this.getAddresses();\n        return addresses.find((addr)=>addr.isDefault) || addresses[0] || null;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/addressStorage.ts\n"));

/***/ })

});